/*
 * Copyright 2013 bits of proof zrt.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.bitsofproof.supernode.api;

message Ping {
	required uint32 bcsapiversion = 1;
	required uint64 nonce = 2;
}

message Alert {
	required uint32 bcsapiversion = 1;
	required string alert = 2;
	required uint32 severity = 3; 			// 0: info, 1: warning, 2: error
}

// input point of a transaction. 
message TransactionInput {
	required bytes source = 1; 				// source transaction hash
	required uint32 sourceix = 2;    		// index of the output in the source stransaction
	required uint32 sequence = 3; 			// higher wins
	required bytes script = 4;    			// inputs to the script of the transaction output
}

// output point of a transaction. 
message TransactionOutput {
	required uint64 value = 1; 				// value that can be claimed ...
	required bytes script = 2; 				// ... if satisfying this output script
	optional bytes color = 3;				// color of this output terms hash
}

// a transaction. 
message Transaction {
	required uint32 bcsapiversion = 1;
	required uint32 version = 3;
	required uint32 locktime = 4;   		// block number or time this is valid from
	repeated TransactionInput inputs = 5;
	repeated TransactionOutput outputs = 6;
	optional bytes block = 7;
	optional bool doubleSpend = 8;			// set if this transaction IS a double spend and should be removed/ignored
	optional uint32 height = 9;
}

// a block. 
// matches the P2P Bitcoin protocol message
message Block {
	required uint32 bcsapiversion = 1;
	required uint32 version = 2;
	required bytes previousBlock = 3;		// previos block hash
	required bytes merkleRoot = 4;			// block content hash tree root
	required uint32 timestamp = 5;			// the block was mined at
	required uint32 difficulty = 6;			// encoded difficulty for POW
	required uint32 nonce = 7;				// parameter of POW
	repeated Transaction transactions = 8;
	optional uint32 height = 9;
}


// a block chain reorg is a transaction removing and adding a few blocks at once
message TrunkUpdate {
	required uint32 bcsapiversion = 1;
	repeated Block added = 2;				// blocks added to trunk
	repeated Block removed = 3;				// blocks no longer on trunk
}

message Hash {
	required uint32 bcsapiversion = 1;
	repeated bytes hash = 2;
}

message ExceptionMessage {
	required uint32 bcsapiversion = 1;
	repeated string message = 2;
}

message Color {
	required bytes transaction = 1;
	required string terms = 2;
	required uint64 unit = 3;
	required uint32 expiryHeight = 4;
	required bytes pubkey = 5;
	required bytes signature = 6;
}

message FilterRequest {
	required uint32 bcsapiversion = 1;
	required bytes filter = 2;
	required uint32 hashFunctions = 3;
	required uint32 tweak = 4;
	required uint32 mode = 5;
}

message ExactMatchRequest
{
	required uint32 bcsapiversion = 1;
	required uint32 mode = 2;
	repeated bytes match = 3;
	optional uint64 after = 4;
}

message AccountRequest
{
	required uint32 bcsapiversion = 1;
	required string publicKey = 2;
	required uint32 lookAhead = 3;
	optional uint64 after = 4;
}

message Wallet {
	required uint32 bcsapiversion = 1;
	required bytes encryptedSeed = 2;
	required bytes signature = 3;
	message Account
	{
		required string publicKey = 1;
		required uint64 created = 2;
		required string name = 3;
	}
	repeated Account accounts = 4;
}